{
	"info": {
		"_postman_id": "1efe21c9-9ada-41b8-a058-c4dae4246533",
		"name": "Todoist",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "TASKS",
			"item": [
				{
					"name": "Create Tasks",
					"item": [
						{
							"name": "Create a new task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Validate content\", function () {  ",
											"    pm.expect(jsonData.content).to.eql(\"Buy Milk\");",
											"});",
											"",
											"",
											"var schema = {",
											"    \"id\": \"text\",",
											"    \"assigner\": \"text\",",
											"    \"project_id\": \"text\",",
											"    \"section_id\": \"text\",",
											"    \"order\": \"text\",",
											"    \"content\": \"text\",",
											"    \"completed\": Boolean,",
											"    \"label_ids\": Object,",
											"    \"priority\": \"text\",",
											"    \"comment_count\": \"text\",",
											"    \"creator\": \"text\",",
											"    \"created\": \"text\",",
											"    \"due\": {",
											"        \"recurring\": Boolean,",
											"        \"string\": \"text\",",
											"        \"date\": \"text\",",
											"        \"datetime\": \"text\",",
											"        \"timezone\": \"text\"",
											"    },",
											"    \"url\": \"text\"",
											"};",
											"pm.test('Validate Schema',() => {",
											"    pm.response.to.have.jsonSchema(schema);",
											"  });",
											"",
											"",
											"pm.test(\"Validate Response time is less than 800ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(800);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "X-Requested-Id",
										"value": "$(uuidgen)",
										"type": "text"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer $token",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"Buy Milk\",\n    \"due_string\": \"tomorrow at 12:00\",\n    \"due_lang\": \"en\",\n    \"priority\": 4\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}",
									"host": [
										"{{baseURL}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Active Tasks",
					"item": [
						{
							"name": "Get Active tasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate if all tasks have the Content property\", function () {",
											"    _.each(pm.response.json(), (item) => {",
											"        pm.expect(item).to.have.property(\"content\");",
											"        pm.expect(item).to.have.property(\"completed\").and.be.eql(false);",
											"    })",
											"})",
											"",
											"",
											"var schema = {",
											"    \"type\": \"array\",",
											"    \"items\": {",
											"                \"id\": \"text\",",
											"                \"assigner\": \"text\",",
											"                \"project_id\": \"text\",",
											"                \"section_id\": \"text\",",
											"                \"order\": \"text\",",
											"                \"content\": \"text\",",
											"                \"completed\": Boolean,",
											"                \"label_ids\": Object,",
											"                \"priority\": \"text\",",
											"                \"comment_count\": \"text\",",
											"                \"creator\": \"text\",",
											"                \"created\": \"text\",",
											"                \"url\": \"text\"",
											"    }",
											"};",
											"pm.test('Validate Schema',() => {",
											"    pm.response.to.have.jsonSchema(schema);",
											"  });",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}",
									"host": [
										"{{baseURL}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get an active task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Validate content\", function () {  ",
											"    pm.expect(jsonData.content).to.eql(\"This is a task. Drag it to the \\\"Doing\\\" section\");",
											"});",
											"",
											"",
											"",
											"var schema = {",
											"    \"items\": {",
											"                \"id\": \"text\",",
											"                \"assigner\": \"text\",",
											"                \"project_id\": \"text\",",
											"                \"section_id\": \"text\",",
											"                \"order\": \"text\",",
											"                \"content\": \"text\",",
											"                \"completed\": Boolean,",
											"                \"label_ids\": Object,",
											"                \"priority\": \"text\",",
											"                \"comment_count\": \"text\",",
											"                \"creator\": \"text\",",
											"                \"created\": \"text\",",
											"                \"url\": \"text\"",
											"    }",
											"};",
											"pm.test('Validate Schema',() => {",
											"    pm.response.to.have.jsonSchema(schema);",
											"  });",
											"",
											"",
											"",
											"pm.test(\"Response time is less than 550ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(550);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseURL}}/{{taskId}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{taskId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Tasks",
					"item": [
						{
							"name": "Update a task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"pm.test(\"Response time is not avobe than 700ms\", function () {",
											"    pm.expect(pm.response.responseTime).is.not.above(700);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-Requested-Id",
										"value": "$(uuidgen)",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"Buy Coffee\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{taskIdUpdate}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{taskIdUpdate}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Close Tasks",
					"item": [
						{
							"name": "Close a task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 550ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(550);",
											"});",
											"",
											"pm.test(\"Response time is not below 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).is.not.below(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseURL}}/{{taskToClose}}/close",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{taskToClose}}",
										"close"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reopen Tasks",
					"item": [
						{
							"name": "Reopen a Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 600ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(600);",
											"});",
											"",
											"pm.test(\"Response time is not equal than 300ms\", function () {",
											"    pm.expect(pm.response.responseTime).is.not.eql(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/{{taskToReopen}}/reopen",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{taskToReopen}}",
										"reopen"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Tasks",
					"item": [
						{
							"name": "Delete a task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 450ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(450);",
											"});",
											"",
											"pm.test(\"Response time is not equal than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).is.not.eql(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseURL}}/4670841749",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"4670841749"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Change task status",
					"item": [
						{
							"name": "Change task status to 'Complete'",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is not 200\", function () {",
											"    pm.response.code !== 200;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"completed\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/{{taskIdUpdate}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"{{taskIdUpdate}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 2xx\", function () {",
					"    pm.response.to.be.success;",
					"});",
					"",
					""
				]
			}
		}
	]
}